import tensorflow as tf
from tensorflow.keras import layers, models
import numpy as np
import matplotlib.pyplot as plt
import os
import cv2
from sklearn.model_selection import train_test_split

# Define image size
IMG_SIZE = 128

# Load dataset (Ensure dataset is organized into 'handwritten/' and 'printed/' folders)
def load_dataset(data_dir):
    categories = ["handwritten", "printed"]
    data = []
    labels = []

    for label, category in enumerate(categories):
        path = os.path.join(data_dir, category)
        for img_name in os.listdir(path):
            img_path = os.path.join(path, img_name)
            img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)  # Convert to grayscale
            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))  # Resize
            data.append(img)
            labels.append(label)

    data = np.array(data) / 255.0  # Normalize pixel values
    labels = np.array(labels)
    
    # Reshape data to fit CNN input (add channel dimension)
    data = data.reshape(-1, IMG_SIZE, IMG_SIZE, 1)
    
    return data, labels

# Load dataset (Update path accordingly)
data_dir = "train"
X, y = load_dataset(data_dir)

# Split dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build CNN Model
def create_model():
    model = models.Sequential([
        layers.Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 1)),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(64, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Conv2D(128, (3, 3), activation='relu'),
        layers.MaxPooling2D((2, 2)),
        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Dropout(0.5),  # Helps prevent overfitting
        layers.Dense(2, activation='softmax')  # 2 output classes
    ])
    
    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
    return model

# Train model
model = create_model()
history = model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=32)

# Evaluate model
test_loss, test_acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_acc:.2f}")

# Function to predict new image
def predict_image(img_path, model):
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
    img = img / 255.0
    img = img.reshape(1, IMG_SIZE, IMG_SIZE, 1)

    prediction = model.predict(img)
    class_names = ["Handwritten", "Printed"]
    return class_names[np.argmax(prediction)]

# Test on a new image
test_img = "path_to_test_image.jpg"
result = predict_image(test_img, model)
print(f"Predicted Class: {result}")
